Tile Map

https://en.wikibooks.org/wiki/Super_NES_Programming/Graphics_tutorial

The map is a 2 dimensional array (32x32, 64x32, 32x64 or 64x64) of tile indexes. The SNES goes through the array and for each index in the map renders a tile specified in the array. Since tiles can be either 8x8 or 16x16 pixels, we can end up with background image dimensions ranging from 256 to 1024 pixels (size_of_map * size_of_tile).

A member of an array is a two bytes long structure(two bytes long = 16 bits):

High byte Low byte

vhopppcc cccccccc

c is the index of a tile in the tileset (tileset is specified per BG), SNES will get the address of a tile as (base_tileset_bits << 13) + (8 * color_depth * tile_number)
h: horizontal flip
v: vertical flip
p: palette number
o: priority bit
Use registers $2107-$210A to set map for your background.

Structure of registers $2107-$210A

aaaaaass

a: address of the map in VRAM. Multiply the number by 2048 (or shift 11 bits) in order to get the byte location of the map.

s: size of the map

Sizes:

* 00=32x32
* 01=64x32
* 10=32x64
* 11=64x64



1 top left corner round
2 bottom left corner round (this can be flipped)
3 top right corner round
4 bottom right corner round

(can snes background tiles be flipped - yes)


2 top wall
3 left edge wall
4 squared top right corner
5 squared top left corner


background colors
10 000000 black
11 fb0007 red border
12 fda985 pink inner border
13 d6d6d6 white

Top left corner rounded (leaving off the 1)

00001111
00112222
01222222
01222111
12221000
12210000
12210000
12210000

top wall

11111111
22222222
22222222
11111111
00000000
00000000
00000000
00000000

Tried updating bitplanes.py to add an offset for the palette. But this is wrong
the tiles themselves are limited to 1 byte per pixel

https://www.vg-resource.com/thread-28888.html

so the output tiles easily fit in single text character per pixel (0-f). it's the OAM or background  table that maps a tile to a palette.



tiles are 4 bpp, and these are 8x8 pixels
64 pixels, 256 bits
8 bytes


in the ROM, they're all aligned, but once I copy to VRAM there's extra junk in front

address of bow is 8300
That makes sense - ROM0 starts at 8000 and code is mapped first
address of elbow in ROM is 8380

This is good info for backgrounds:
https://wiki.superfamicom.org/working-with-vram-initializing-tiles-and-tile-maps

!!VERY IMPORTANT!! Each address in VRAM is A WORD IN SIZE. I misunderstood this at one point and it screwed everything I thought I knew. SO REMEMBER, $0000 holds 2 bytes, low and high.


Register $2105
Screen mode register (1b/W)

dcbapmmm    d: BG4 tile size    c: BG3 tile size    b: BG2 tile size
            a: BG1 tile size    Sizes are: 0=8x8; 1=16x16. (See reg. $2107)
            p: order of BG priorities   m: General screen mode

MODE    # of BGs    Max Colors/Tile     Palettes        Colors Total
0       4           4                   32 (8 per BG)   128 (32 per BG*4 BGs)
1       3           BG1/BG2:16 BG3:4    8               BG1/BG2:128 BG3:32
2       2           16                  8               128
3       2           BG1:256 BG2:16      BG1:1 BG2:8     BG1:256 BG2:128
4       2           BG1:256 BG2:4       BG1:1 BG2:8     BG1:256 BG2:32
5       2           BG1:16 BG2:4        8               BG1:128 BG2:32(Interlaced)
6       1           16                  8               128 (Interlaced mode)
7       1           256                 1               256


- to use

dcba - sizes of tiles on bg 4321. 0=8x8, 1=16x16
p: order of bg priorities
mmm: mode 0-7

I have 8x8 tiles, and only 4 colors per tile. My tiles are 4bpp so they COULD be up to 16. and I could use mode 1. But I'll stick with mode 0 I guess

dcbapmmm
00000000 - i can just stz to 2105

stz $2105

Register $2107

BG1 Tile Map location

aaaaaass
a: Tile map address
s: Screen size: 00=32x32 01=64x32 10=32x64 11=64x64

we have 6 bits for the tile map address.

Shift the bits we have address by $0A (10d) to get the address. they're in  $0400 increments, which is 1024.
ah that makes sense. We want a 16-bit address but we only have 6 bits, so we shift by 10 bits.
and MSB must be zero since we only have 64K of ram

2108: BG2 tile map location
2109: BG3 tile map location
210A: BG4 Tile map location

And for the screen size, I can just stick with 00 for 32x32.

establish an address for tile maps

lda #%xxxxxx00
sta $2107

210B: BG1 and BG2 character location

aaaabbbb        a: Base address for BG2.
                b: Base address for BG1.

210C is BG3 and BG4

Do these get shifted by $0C?
YES!

so, establish an address for BG1 characters. it'll be 32x32

lda #%0000xxxx
sta $210B

In the example they used $0000 for the character map offset, since characters must be 1000 - aligned. Even though they covered tiles first.

So just for the exercise of learning it, i'll put my background tiles at $0400 and my character data at $1000


; lda #%00000100
lda #$04
sta $2107


Character data
lda #$01
sta $210B

Register $212C
---abcde            a: Sprites disable/enable.
                    b: Disable/enable BG4.
                    c: Disable/enable BG3.
                    d: Disable/enable BG2.
                    e: Disable/enable BG1.

lda #%00010001
sta $212C       ; enable BG1 and sprites. I think I already have a line for this

TILE MAP FORMAT

Each entry in the Tile Map is worth 2 bytes. Here's the format:

High        Low                 v: vertical flip    h: horizontal flip
vhopppcc    cccccccc            o: priority bit     p: palette number
                                c: Starting character (tile) number

now some character data to load

3 bits for palette

but my existing code has the palette starting at 80
- maybe because I'm just using 8 palettes?
- is this banked? maybe it's banked
- It didn't work when I set the CGRAM offset to 00.
- but the palette debugger did show my palette at the top.
- maybe it depends on the display mode

high
vhopppcc
00000100
lda #%

low
cccccccc
00000001

so how do I populate character data?

VMADDL      = $2116     ; address (Low) for VRAM write
VMADDH      = $2117     ; high
VMDATAL     = $2118     ; Data (low) for vram write
VMDATAH     = $2119     ; high

    low       high
00000100 00000000 ; top-left elbow 40
00000100 00000001 ; top wall       41
00000100 00000001 ; top wall       41
01000100 00000000 ; flipped elbow  44


putting character data starting at 0000
ldx #$0000        ; we write to both with a 16-bit register
stx VMADDL
lda #$80          ;
sta VMAINC        ; increment VRAM address by 1 when writing to VMDATAH
ldx #$40          ; no flips, palette 1, top left elbow
stx VMDATAH
ldx #$41          ; no flips, palette 1, top wall
stx VMDATAH
ldx #$41          ; no flips, palette 1, top wall
stx VMDATAH
ldx #$44          ; h flip, palette 1, top left elbow
stx VMDATAH



Added my code, now trying to handle my palettes and OAMRAM

From https://wiki.superfamicom.org/sprites:

There are 8 16-color palettes available to sprites, starting at CGRAM index 128. Thus, the palette number 'ppp' in OAM indicates that colors 128+ppp16 through 128+ppp16+15 are available to this sprite. However, the first of these is always considered transparent, to allow for non-rectangular shaped sprites.

looks like the +8 offset was because I was loading sprite palettes before. Now I'm loading background palettes, which are different


Revisiting OAM table

byte OBJ*4+0: xxxxxxxx
byte OBJ*4+1: yyyyyyyy
byte OBJ*4+2: cccccccc
byte OBJ*4+3: vhoopppN



cccccccc  = First tile of the sprite.^^
N         = Name table of the sprite. See below for the calculation of the VRAM address.
ppp       = Palette of the sprite. The first palette index is 128+ppp*16.
oo        = Sprite priority. See below for details.
h/v       = Horizontal/Vertical flip flags.^^^
s         = Sprite size flag. See below for details


When I had lines like

    lda #$00            ; sprite 1, name is 00

This was for byte OBJ*4+2

^^See below for the calculation of the VRAM address. Note that this could also be considered as 'rrrrcccc' specifying the row and column of the tile in the 16x16 character table.

Character table in VRAM
Sprites have two 16x16 tile character tables in VRAM. Wrapping on these works much like for BG tilemaps: tile 0 is to the right of tile $0F and below tile $F0, tile $10 is below tile 0 and to the right of tile $1F, tile $FF is to the left of tile $F0 and above tile $0F, and so on.

As far as sprite table locations go, the first sprite table is at the address specified by the Name Base bits of $2101, and the offset of the second is determined by the Name bits of $2101. The word address in VRAM of a sprite's first tile may be calculated as:

((Base<<13) + (cccccccc<<4) + (N ? ((Name+1)<<12) : 0)) & 0x7fff

so 2101 - OBJSEL
I guess it was zero and that's why we just loaded VRAM to 0

so if my sprite tiles aren't at 0000, I need to establish a place and use that when loading OAM. Maybe I should move that first?

Next steps

0. Update palette python code to spit out separate BG and FG palettes DONE
1. load BG Palette to 00 DONE
2. load ms pacman palette to 80 DONE
3. Load BG tiles to VRAM at $0000 DONE
4. load ms pacman tiles to $1000 DONE
5. load BG character data to $0400 (aka tile map)
6. Load ms pacman character data to $0800?
